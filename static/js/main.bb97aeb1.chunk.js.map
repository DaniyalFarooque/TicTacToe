{"version":3,"sources":["helper.js","components/Square.js","components/Board.js","components/SettingsBar.js","theme.js","components/Move.js","components/HistoryBar.js","components/App.js","index.js"],"names":["human","ai","scores","calculateWinner","squares","lines","i","length","a","b","c","bestMove","xO","set_variables","move","bestScore","Infinity","score","minimax","depth","isMaximizing","result","Square","mark","color","value","onClick","Button","variant","children","Board","Card","className","map","square","SettingsBar","message","opponent","startPlayer","winner","onChange","status","motion","div","Grid","container","justify","item","ToggleButtonGroup","exclusive","handleOpponent","ToggleButton","aria-label","handleStartPlayer","disabled","id","animate","x","y","scale","style","background","fontFamily","height","width","component","whileHover","transition","duration","whileTap","theme","createMuiTheme","typography","body2","shape","borderRadius","overrides","MuiButton","root","size","margin","MuiCard","alignContent","display","backgroundColor","MuiToggleButton","Move","destination","ThemeProvider","HistoryBar","history","_step","App","useState","setOpponent","setStartPlayer","disableStartingPlayer","setDisableStartingPlayer","Array","fill","setHistory","stepNumber","setStepNumber","setXO","xIsNext","setXisNext","newGame","player","reset","historyPoint","slice","current","aiMove","console","log","event","newStartPlayer","newOpponent","step","newXO","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb97aeb1.chunk.js","sourcesContent":["// Store necessary values\r\nlet human, ai, scores;\r\n\r\nfunction set_variables (xO){\r\n  ai = xO;\r\n  human = (xO === 'X' ? 'O' : 'X');\r\n  if(ai==='O'){\r\n    scores = {\r\n      'X': -10,\r\n      'O': 10,\r\n      'draw': 0\r\n    };\r\n  }else if(ai==='X'){\r\n    scores = {\r\n      'X': 10,\r\n      'O': -10,\r\n      'draw': 0\r\n    };\r\n  }\r\n}\r\n\r\nexport function calculateWinner(squares) {\r\n\r\n  //Winning combinations\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n\r\n    // Are there 3 marks in a row (up, down, across, or diagonally) ? \r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  for(let i=0;i<9;i++){\r\n\r\n    // Is the spot available?\r\n    if(squares[i]===null){\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Return draw, no empty square && winning combination\r\n  return \"draw\";\r\n\r\n}\r\n\r\nexport function bestMove(squares,xO) {\r\n  const result = calculateWinner(squares);\r\n  if (result !== null) {\r\n    return null;\r\n  }\r\n\r\n  // Set variables\r\n  set_variables(xO);\r\n\r\n  // AI to make its turn\r\n  let bestScore = -Infinity;\r\n  let move;\r\n\r\n  for(let i=0;i<9;i++){\r\n\r\n    // Is the spot available?\r\n    if(squares[i]===null){\r\n      \r\n      // Place at the available spot\r\n      squares[i]=xO;\r\n      \r\n      // Compute the score of this move using minimax algo\r\n      let score = minimax(squares,0,false);\r\n\r\n      // Backtrack\r\n      squares[i]=null;\r\n\r\n      // Store the score with the highest value and the position\r\n      if(score>bestScore){\r\n        bestScore=score;\r\n        move=i;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return the positon with maximum score\r\n  return move;\r\n\r\n}\r\n\r\n\r\n\r\nexport function minimax(squares,depth,isMaximizing){\r\n  const result = calculateWinner(squares);\r\n  if (result !== null) {\r\n    return scores[result];\r\n  }\r\n  let bestScore;\r\n\r\n  if (isMaximizing) {\r\n    bestScore = -Infinity;\r\n    for (let i = 0; i < 9; i++) {\r\n\r\n      // Is the spot available?\r\n      if(squares[i]===null){\r\n\r\n        //Place at the available spot\r\n        squares[i] = ai;\r\n        let score = minimax(squares, depth + 1, false);\r\n        \r\n        //Backtrack\r\n        squares[i]=null;\r\n\r\n        //Store the score with the highest value\r\n        if(score>bestScore)\r\n          bestScore=score;\r\n\r\n      }\r\n    }\r\n  } else {\r\n    bestScore = Infinity;\r\n    for (let i = 0; i < 9; i++) {\r\n\r\n      // Is the spot available?\r\n      if(squares[i]===null){\r\n\r\n        //Place at the available spot ()\r\n        squares[i] = human;\r\n        let score = minimax(squares, depth + 1, true);\r\n        \r\n        //Backtrack\r\n        squares[i]=null;\r\n\r\n        //Store the score with the lowest value\r\n        if(score<bestScore)\r\n          bestScore=score;\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return bestScore according to the policy\r\n  return bestScore;\r\n\r\n}\r\n","import React from \"react\";\r\nimport { Button } from '@material-ui/core';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\n/* \r\n    value defines the piece placed at the square, \r\n    it can 'X', 'O' or empty\r\n    onClick is a function\r\n*/\r\nconst Square = ({value,onClick})=>{\r\n\r\n    //choose mark to display on button\r\n    let mark, color;\r\n    if (value==='X') {\r\n        color=\"primary\";\r\n        mark = <ClearIcon />;\r\n    }\r\n    else if(value==='O') {\r\n        color=\"secondary\";\r\n        mark = <RadioButtonUncheckedIcon/>;\r\n    }\r\n    else \r\n        mark = null;\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                variant=\"contained\"\r\n                children={mark}\r\n                onClick = {onClick}\r\n                color = {color}\r\n            >\r\n            </Button>\r\n        </>\r\n    );\r\n}\r\nexport default Square;","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport {Card} from '@material-ui/core';\r\n\r\n//onClick function to store history of moves, parameter => index of square\r\nconst Board = ({ squares, onClick}) => {\r\n    return (\r\n        <>\r\n            <Card> \r\n                <h1>Tic Tac Toe</h1>\r\n                <div className=\"board\">\r\n                    {squares.map((square,i) => {\r\n                        return <Square key={i} value={square} onClick = {()=>onClick(i)} />\r\n                    })}\r\n                </div>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport {motion} from 'framer-motion';\r\nimport {Button, Grid} from '@material-ui/core';\r\nimport {ToggleButton, ToggleButtonGroup} from '@material-ui/lab';\r\nimport ComputerIcon from '@material-ui/icons/Computer';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\n\r\nconst SettingsBar = ({opponent,startPlayer,winner,xO,onChange,status,onClick})  => { \r\n    let message;\r\n    if(winner === null){\r\n        message = `Next Player:  ${xO}`;\r\n    }else if(winner === 'draw'){\r\n        message = 'Draw';\r\n    }else{\r\n        if(opponent === 'computer')\r\n            message = 'Lose';\r\n        else\r\n            message = `Winner ${winner}`;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            \r\n            <motion.div className = 'setbar'> {/*animate = {{x: -150 , scale: 1.1,  }}>*/}\r\n                \r\n                <Grid  container justify = 'center'  item>\r\n    \r\n                    <h3>Opponent</h3>\r\n\r\n                    <ToggleButtonGroup value = {opponent} exclusive onChange = {onChange.handleOpponent}>\r\n                        <ToggleButton value = 'human' aria-label = 'human' color = 'primary'>\r\n                            <PersonIcon />\r\n                        </ToggleButton>\r\n                        <ToggleButton value = 'computer' aria-label = 'computer' color = 'primary'>\r\n                            <ComputerIcon />\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n\r\n                    <h3>Starting Player</h3>\r\n                    \r\n                    <ToggleButtonGroup value = {startPlayer} exclusive  onChange = {onChange.handleStartPlayer}>\r\n                        <ToggleButton value = 'human' disabled = {status} aria-label = 'human' color = 'primary'>\r\n                            <PersonIcon />\r\n                        </ToggleButton>\r\n                        <ToggleButton value = 'computer' disabled = {status} aria-label = 'computer' color = 'primary'>\r\n                            <ComputerIcon />\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n\r\n                    <h3>{ message }</h3> \r\n                </Grid>\r\n                { winner != null && (\r\n                    <motion.div id = 'result' animate = {{x: 550, y:-200, scale: 1.2,  }}>\r\n                        <h1>{ message }</h1> \r\n\r\n                        <Button \r\n                            style = {{ \r\n                                background: 'linear-gradient(90deg, rgba(56,237,46,1) 0%, rgba(245,252,70,1) 100%)',\r\n                                fontFamily: 'Benne',\r\n                                height: '50px',\r\n                                width: '150px',\r\n                            }}  \r\n                            onClick = {onClick} \r\n                            component = {motion.div}\r\n                            whileHover = {{\r\n                                scale: 1.2,\r\n                                transition: { duration: 0.3 }\r\n                            }}\r\n                            whileTap = {{ scale: 0.9 }}\r\n                        >\r\n                            New Game\r\n                        </Button>\r\n                    </motion.div>\r\n                )}\r\n            </motion.div>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default SettingsBar;\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\n//Create a theme instance\r\nexport const theme = createMuiTheme({\r\n    \r\n    typography:{\r\n        fontFamily:\"Benne\",\r\n        body2:{\r\n            fontFamily:\"Benne\"\r\n        }\r\n    },\r\n    shape:{\r\n        borderRadius: \"0.5rem\"\r\n    },\r\n    overrides:{\r\n        MuiButton:{\r\n            root:{\r\n                variant: 'contained',\r\n                size: 'large',\r\n                color: 'white',\r\n                margin: '0.75rem',\r\n            },\r\n        },\r\n        MuiCard:{\r\n            root:{\r\n                alignContent: 'center',\r\n                display: 'block',\r\n                height:'450px',\r\n                width: '22rem',\r\n                borderRadius: '1rem',\r\n                backgroundColor: '#e9d8a6',\r\n            }\r\n        }, \r\n        MuiToggleButton:{\r\n            root:{\r\n                color: 'grey',\r\n                backgroundColor: 'white',\r\n                // '&:focus': {\r\n                //     color: 'grey',\r\n                //     backgroundColor: 'grey'\r\n                // },\r\n            }\r\n        },\r\n    }\r\n});","import React from \"react\";\r\nimport {Button, ThemeProvider} from '@material-ui/core';\r\nimport { motion } from \"framer-motion\";\r\nimport { theme } from '../theme';\r\n\r\nconst Move = ({ destination, onClick}) => {\r\n    // console.log(move);\r\n    return (\r\n        <>\r\n            <div>\r\n                <ThemeProvider theme={theme}>\r\n                    <Button \r\n                        style = {{ \r\n                            background: '#006d77'\r\n                        }}  \r\n                        onClick = {onClick}\r\n                        component = {motion.div}\r\n                        whileHover = {{\r\n                            scale: 1.2,\r\n                            transition: { duration: 0.3 }\r\n                        }}\r\n                        whileTap = {{ scale: 0.9 }}\r\n                    >\r\n                        {destination} \r\n                    </Button>\r\n                </ThemeProvider>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Move;\r\n","import React from 'react';\r\nimport {motion} from 'framer-motion';\r\nimport {Card, ThemeProvider} from '@material-ui/core';\r\nimport Move from './Move';\r\nimport { theme } from '../theme';\r\n\r\nconst HistoryBar = ({history,onClick})=>{\r\n    \r\n    return (\r\n        <>\r\n            <motion.div className = \"histbar\"> {/* animate={{x:-10 ,scale:1.1}} */}\r\n                <ThemeProvider theme={theme}>\r\n                    <Card style = { {backgroundColor: '#cdb4db'} }>\r\n                        <h3>History</h3>\r\n                        <div className=\"history\">\r\n                            {history.map((_step, move) => {\r\n                                const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n                                return (\r\n                                <Move key={move} destination={destination} onClick={() => onClick(move)}/>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </Card>\r\n                </ThemeProvider>\r\n            </motion.div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HistoryBar;\r\n","import React, { useState } from \"react\";\r\nimport { calculateWinner, bestMove } from \"../helper\";\r\nimport Board from \"./Board\";\r\nimport SettingsBar from \"./SettingsBar\";\r\nimport HistoryBar from \"./HistoryBar\";\r\n\r\nconst App = () => {\r\n  // Tracking opponent and startPlayer\r\n  const [opponent, setOpponent] = useState('human');\r\n  const [startPlayer, setStartPlayer] = useState('human');\r\n  const [disableStartingPlayer,setDisableStartingPlayer] = useState(true);\r\n\r\n  // Initialise the board as empty\r\n  const [history, setHistory] = useState([Array(9).fill(null)])\r\n\r\n  // Tracking the current step number, xO(X or O)\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xO, setXO] = useState('X');\r\n  const [xIsNext, setXisNext] = useState(true);\r\n\r\n  // Compute winner\r\n  const winner = calculateWinner(history[stepNumber]);\r\n\r\n  const handleOpponent = (event, newOpponent) => {\r\n\r\n    // Clear Game Data\r\n    reset();\r\n\r\n    // Validity Check, if same button is pressed don't allow\r\n    if(newOpponent!=null)\r\n      setOpponent(newOpponent);\r\n\r\n    if(newOpponent==='computer'){\r\n\r\n      // Enable the start player options\r\n      setDisableStartingPlayer(false);\r\n\r\n    }else if(newOpponent==='human'){\r\n        \r\n      // Disable the startplayer options\r\n      setDisableStartingPlayer(true);\r\n    }\r\n\r\n  };\r\n\r\n  const handleStartPlayer = (event, newStartPlayer) => {\r\n    \r\n    // Validity Check, if same button is pressed don't allow\r\n    if(newStartPlayer != null)\r\n      setStartPlayer(newStartPlayer);\r\n\r\n    // Start New Game\r\n    newGame(newStartPlayer);\r\n\r\n  }\r\n\r\n  const handleClick = (i) => {\r\n    \r\n    // Retrieve Saved Data\r\n    const historyPoint = history.slice(0, stepNumber + 1);\r\n    const current = historyPoint[stepNumber];\r\n    const squares = [...current];\r\n\r\n    // Return if won or occupied\r\n    if (winner || squares[i]) return;\r\n\r\n    // Move made by human\r\n    squares[i] = xO;\r\n    console.log(`registering this move at ${i} made by human ${xO}`);\r\n\r\n    // Problem here useState is asynchronous\r\n    const newXO = (xO ==='X') ? 'O' : 'X';  //So we need to add a separate variable\r\n\r\n    if(opponent === 'human'){\r\n      setXO(newXO);\r\n\r\n    }else if(opponent==='computer' && winner===null){\r\n\r\n      // Move made by computer\r\n      const aiMove = bestMove(squares,newXO);\r\n\r\n      // Can we make a move?\r\n      if(aiMove!=null)\r\n        squares[aiMove]=newXO;\r\n      console.log(`registering this move at ${aiMove} made by computer ${newXO}`);\r\n\r\n    }\r\n\r\n    // Update the Game Data\r\n    setHistory([...historyPoint, squares]);\r\n    setStepNumber(historyPoint.length);\r\n    setXisNext(!xIsNext);\r\n\r\n  };\r\n\r\n  const newGame = (player)=>{\r\n    \r\n    // Clear Game Data\r\n    reset();\r\n\r\n    // Check startPlayer is computer\r\n    if(player === 'computer'){\r\n\r\n      // Retrieve Saved Data\r\n      const historyPoint = history.slice(0, 1);\r\n      const current = historyPoint[0];\r\n      const squares = [...current];\r\n\r\n      // Move made by computer\r\n      const aiMove = bestMove(squares,xO);\r\n      squares[aiMove] = xO;\r\n      console.log(`registering this move at ${aiMove} made by ${xO}`);\r\n      \r\n      // Update the Game Data\r\n      setHistory([...historyPoint, squares]);\r\n      setStepNumber(historyPoint.length);\r\n      setXisNext(!xIsNext);\r\n      setXO((xO ==='X') ? 'O' : 'X');\r\n\r\n      }\r\n    }\r\n\r\n    const reset = () =>{\r\n      setHistory([Array(9).fill(null)]);\r\n      setStepNumber(0);\r\n      setXisNext(true);\r\n      setXO('X');\r\n    }\r\n\r\n    const jumpTo = (step) => {\r\n\r\n      // Update the stepNumber with the stepNumber of Move component  \r\n      setStepNumber(step);\r\n      setXisNext(step % 2 === 0);\r\n\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <div className=\"rowC\">\r\n          <div className=\"rowC\">\r\n            <SettingsBar opponent={opponent} startPlayer={startPlayer} winner={winner} xO={xO} status={disableStartingPlayer} onChange={{handleStartPlayer, handleOpponent}} onClick={()=>newGame(startPlayer)}/>\r\n            <HistoryBar history={history} onClick={jumpTo}/>\r\n          </div>\r\n          <Board squares={history[stepNumber]} onClick={handleClick} />\r\n        </div>\r\n      </>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}